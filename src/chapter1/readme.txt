1.
由C语言程序变为一个exe的可执行程序，需要依次经过：
预处理器，编译器，汇编器，以及链接器四个部分。

经过预处理器后，C源程序code1变成 ”修改了的源程序“code2
code2经过编译器后，就会生成对应的汇编程序code3
code3再通过汇编器，将生成可重定位的 目标程序code4
最后，在链接器处，将code4与一些头文件的目标程序链接起来，形成.exe的可执行程序
其中：
code1是.c类型的源程序
code2是.i类型的扩展源程序
code3是.s类型的汇编程序
code4是.o类型的目标程序

2.
预处理阶段实际上就是将C源程序中的头文件所代表的程序导入进来，也就是消除头文件并将其真正的代码引入的过程
编译阶段就是将扩展了的C源程序中的每一行都解析成对应的汇编指令
汇编阶段则将汇编指令集解析成对应的机器指令并打包成目标文件
链接阶段就将源程序对应的目标文件以及其中使用到的标准库函数（如printf）的目标文件链接起来，形成可执行程序

3.
指令集架构描述的是每条机器指令的效果
微体系结构描述的是处理器实际上是如何实现的

4.
一般来说，主存使用DRAM构成，cache使用SRAM构成。
DRAM内部使用电容存储信息（1、0串），SRAM则使用触发器存储信息。

5.
操作系统一般提供的功能为：处理器管理、内存管理、文件管理、IO管理。
其中，处理器管理映射为对进程、线程的调度；
内存管理映射为虚拟内存的管控；
IO设备则映射为文件，统一为文件管理。

6.
Amdahl定律
这个定律是关于系统性能提升的，具体是：如果对系统中某个部分进行加速改进，那么整体系统的所获得的性能提升取决于
该部分在在整体系统中的重要性以及其本身的加速程度。

7.
超线程与超标量
超线程是指，通过增加硬件（如PC寄存器等），使得原本在同一时刻只能操纵一个线程的处理器能够操纵多个处理器，
不需要多处理器而达到真正并行的效果。
超标量技术，则是一种流水线技术，具体也是通过增加硬件（如增加流水线级数、增加单个流水线步骤上可以执行的指令数）
来达到，同一时刻（并行）（而非同一时间段）运行多个指令。
很明显，超线程技术需要借助超标量来实现。
优点很明显了，缺点：
首先超标量。超标量一般是空间换时间、硬件换时间的思路。
一般超流水线就是通过增加流水线级数实现了这种超标量，而当流水线级数变长时，虽然能够达到加速指令执行速度的目的，
但是当级数过长时，反而会导致cup运行速度变慢。
这个问题可以类比一下：在搬东西的时候，我们经常能看到几个人成一排依次递东西来搬运物品，而根据现实经验，这样做也确实能够
提高效率，但是再设想一下，如果这个队伍很长很长，第一个物品从开始到终点，可能就要花费超长的时间，而单就这个时间，就超过了
以前适量队伍运输所有物品的总时间，就算在后面可以并行更多的任务，也是没有实际意义的。。。






